const [formData, setFormData] = useState({
    name: '',
    email: '',
    problemDescription: '',
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionStatus, setSubmissionStatus] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmissionStatus('');

    // Here you would typically send the form data to a backend API
    // For example, using fetch or axios to send the data to your client service.
    // Simulating a successful submission for now.

    setTimeout(() => {
      setIsSubmitting(false);
      setSubmissionStatus('Your issue has been submitted successfully!');
      setFormData({
        name: '',
        email: '',
        problemDescription: '',
      });
    }, 1500);
  };


    <div class="font-sans w-full max-w-screen-xl items-center justify-center text-white p-8  ">
        <div class="flex flex-row sm:flex-row w-full justify-between items-start">
            <div>
            <div class="text-4xl font-bold tracking-wide text-left">
                Hello User,<br /> Here are your latest tasks
            </div>
            </div>
            <div class="sm:w-fit sm:mt-0 mt-1 bg-gradient-to-r sm:flex-row flex-col justify-center items-center flex rounded-xl">
            <button class="bg-white text-black rounded-full p-2 m-4 mt-0 mr-0 px-4 flex font-bold text-lg">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="size-8">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
                </svg>
            </button>
            </div>
        </div>

        <div class="w-full mt-4 justify-between flex sm:flex-row flex-col">
            <div class="sm:w-1/3 w-full">
            <button class="bg-white text-black sm:hover:bg-gray-200 rounded-full p-2 mb-2 mt-8 px-4 flex font-bold text-lg">+ Add Task</button>
            <div class="flex sm:flex-row flex-row gap-2">
                <button class="bg-white mb-2 w-fit sm:hover:bg-gray-200 text-black rounded-full px-4 p-2 mt-2 flex font-bold sm:text-lg text-md">Manage Topics</button>
                <button class="bg-white mb-2 w-fit ml-2 sm:ml-0 sm:hover:bg-gray-200 text-black rounded-full px-4 p-2 mt-2 flex font-bold sm:text-lg text-md">Manage Friends</button>
            </div>
            </div>
        </div>

        <div class="h-full mt-4 w-full">
            <p class="text-lg text-gray-400">This is where your content will appear.</p>
        </div>
        </div>

        <div className="max-w-72 mx-auto p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold text-center text-gray-800 mb-4">Submit Your Problem</h2>
      <form onSubmit={handleSubmit}>
        {/* Name Field */}
        <div className="mb-4">
          <label htmlFor="name" className="block text-sm font-medium text-gray-600">Your Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
            className="w-full px-4 py-2 border rounded-lg text-gray-800 focus:ring-2 focus:ring-blue-500"
            placeholder="Enter your name"
          />
        </div>

        {/* Email Field */}
        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-gray-600">Your Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
            className="w-full px-4 py-2 border rounded-lg text-gray-800 focus:ring-2 focus:ring-blue-500"
            placeholder="Enter your email"
          />
        </div>

        {/* Problem Description Field */}
        <div className="mb-4">
          <label htmlFor="problemDescription" className="block text-sm font-medium text-gray-600">Problem Description</label>
          <textarea
            id="problemDescription"
            name="problemDescription"
            value={formData.problemDescription}
            onChange={handleChange}
            required
            rows="5"
            className="w-full px-4 py-2 border rounded-lg text-gray-800 focus:ring-2 focus:ring-blue-500"
            placeholder="Describe the problem you're facing..."
          />
        </div>

        {/* Submit Button */}
        <div className="flex justify-center mb-4">
          <button
            type="submit"
            disabled={isSubmitting}
            className={`px-6 py-2 text-white font-semibold rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${isSubmitting ? 'bg-gray-400' : 'bg-blue-500 hover:bg-blue-600'}`}
          >
            {isSubmitting ? 'Submitting...' : 'Submit Ticket'}
          </button>
        </div>
      </form>
    </div>